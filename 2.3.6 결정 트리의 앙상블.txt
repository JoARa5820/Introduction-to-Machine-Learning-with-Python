#-----------------------------------------------------------------------------#

### 2.3.6 결정 트리의 앙상블

#-----------------------------------------------------------------------------#

## 랜덤 포레스트

# 랜덤 포레스트 분석
# two_moon 데이터셋 사용

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_moons

x,y = make_moons(n_samples=100, noise=0.25, random_state=3)
x_train,x_test,y_train,y_test = train_test_split(x,y, stratify=y, random_state=42)

forest = RandomForestClassifier(n_estimators=5, random_state=2)
forest.fit(x_train,y_train)



# 다섯 개의 랜덤한 결정 트리의 결정 경계와 예측한 확률을 평균내어 만든 결정 경계
# 묶어서 돌리기
fig,axes = plt.subplots(2,3, figsize=(15,8))

for i,(ax,tree) in enumerate(zip(axes.ravel(), forest.estimators_)):
    ax.set_title('트리 {}'.format(i))
    mglearn.plots.plot_tree_partition(x, y, tree, ax=ax)

mglearn.plots.plot_2d_separator(forest, x, fill=True, ax=axes[-1,-1], alpha=.4)
axes[-1,-1].set_title('랜덤 포레스트')
mglearn.discrete_scatter(x[:,0], x[:,1], y)



x_train,x_test,y_train,y_test = train_test_split(
        cancer.data, cancer.target, random_state=0)

forest = RandomForestClassifier(n_estimators=100, random_state=0)
forest.fit(x_train,y_train)

print('훈련 세트 정확도: {:.3f}'.format(forest.score(x_train,y_train)))
print('테스트 세트 정확도: {:.3f}'.format(forest.score(x_test,y_test)))


# 유방암 데이터로 만든 랜덤 포레스트 모델의 특성 중요도
# (앞서 만든 def plot_feature_importances_cancer(model): 사용)
plot_feature_importances_cancer(forest)

#-----------------------------------------------------------------------------#

## 그래디언트 부스팅 회귀 트리
from sklearn.ensemble import GradientBoostingClassifier

x_train,x_test,y_train,y_test = train_test_split(
        cancer.data, cancer.target, random_state=0)

gbrt = GradientBoostingClassifier(random_state=0)
gbrt.fit(x_train,y_train)
print('훈련 세트 정확도: {:.3f}'.format(gbrt.score(x_train,y_train)))
print('테스트 세트 정확도: {:.3f}'.format(gbrt.score(x_test,y_test)))


# 과대적합을 막기 위해 사전 가지치기를 하거나 학습률을 낮출 수 있음
gbrt = GradientBoostingClassifier(random_state=0, max_depth=1) # 최대 깊이
gbrt.fit(x_train,y_train)
print('훈련 세트 정확도: {:.3f}'.format(gbrt.score(x_train,y_train)))
print('테스트 세트 정확도: {:.3f}'.format(gbrt.score(x_test,y_test)))

gbrt = GradientBoostingClassifier(random_state=0, learning_rate=0.01) # 학습률
gbrt.fit(x_train,y_train)
print('훈련 세트 정확도: {:.3f}'.format(gbrt.score(x_train,y_train)))
print('테스트 세트 정확도: {:.3f}'.format(gbrt.score(x_test,y_test)))


gbrt = GradientBoostingClassifier(random_state=0, max_depth=1)
gbrt.fit(x_train,y_train)

# 유방암 데이터로 만든 그래디언트 부스팅 분류기의 특성 중요도
plot_feature_importances_cancer(gbrt)

#-----------------------------------------------------------------------------#
